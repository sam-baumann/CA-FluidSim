// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel AutomataProcessor
#pragma kernel AdvanceFlow

//cell struct
struct Cell {
    float previousState;
    float currentState;
};

struct flowDir {
    float up;
    float down;
    float left;
    float right;
};

uint width;
uint height;

// cell buffer
RWStructuredBuffer<Cell> cells;
RWStructuredBuffer<flowDir> prevFlowDirs;
RWStructuredBuffer<flowDir> currFlowDirs;


float getUp(uint index) {
    //if it is the top row, return 10
    uint y = index / width;
    if (y == height - 1) {
        return 10;
    }

    return cells[index + width].previousState;
}

float getDown(uint index) {
    //if it is the bottom row, return 10
    uint y = index / width;
    if (y == 0) {
        return 10;
    }

    return cells[index - width].previousState;
}

float getLeft(uint index) {
    //if it is the leftmost column, return 10
    int x = index % width;
    if (x == 0) {
        return 10;
    }

    return cells[index - 1].previousState;
}

float getRight(uint index) {
    //if it is the rightmost column, return 10
    uint x = index % width;
    if (x == width - 1) {
        return 10;
    }

    return cells[index + 1].previousState;
}

flowDir getIncomingFlow(uint index){
    flowDir flow;
    uint x = index % width;
    uint y = index / width;
    //first get the up cell's downward flow
    if (y == height - 1) {
        flow.up = 0;
    } else {
        flow.up = prevFlowDirs[index + width].down;
    }
    //then the down cell's upward flow
    if (y == 0) {
        flow.down = 0;
    } else {
        flow.down = prevFlowDirs[index - width].up;
    }
    //then the left cell's rightward flow
    if (x == 0) {
        flow.left = 0;
    } else {
        flow.left = prevFlowDirs[index - 1].right;
    }
    //then the right cell's leftward flow
    if (x == width - 1) {
        flow.right = 0;
    } else {
        flow.right = prevFlowDirs[index + 1].left;
    }
    return flow;
}

//this shader should never change the value of previousState - only update CurrentState based on previousState
[numthreads(64,1,1)]
void AutomataProcessor (uint3 id : SV_DispatchThreadID)
{
    int index = id.x;
    Cell cell = cells[index];
    float state = cell.previousState;
    float newState = state;
    flowDir flow = prevFlowDirs[index];

    //sum the outward flow, decrease our state by that much
    newState -= flow.up;
    newState -= flow.down;
    newState -= flow.left;
    newState -= flow.right;

    //sum the inward flow, increase our state by that much
    flowDir incomingFlow = getIncomingFlow(index);
    newState += incomingFlow.up;
    newState += incomingFlow.down;
    newState += incomingFlow.left;
    newState += incomingFlow.right;
    float nextState = newState;

    //clamp our new state value between 0 and 5 (allowing for values of 10+ if it's a wall)
    if (newState < 10) {
        newState = clamp(newState, 0, 5);
    }
    
    //get the cell contents in each direction
    float up = getUp(index);
    float down = getDown(index);
    float left = getLeft(index);
    float right = getRight(index);

    //now apply our automata rules
    //first downward flow. If there's space to go down, we do so
    bool flowingLeft;
    bool flowingRight;
    if (newState > 0 && newState < 10){
        if (down < 1) {
            float space = 1 - down;
            float flow = min(space, newState);
            currFlowDirs[index].down = flow;
        } else {
            //now we see if we can do sideways flow
            //if we can only go in 1 direction, we'll send about 30% of the cell's contents, or whatever the neighboring cell can take, whichever is smaller
            //if we can go in 2 directions, we'll send about 20% of the cell's contents (each way), or whatever the neighboring cells can take, whichever is smaller
            float clampedState = clamp(newState, 0, 1);
            flowingLeft = left < clampedState; 
            flowingRight = right < clampedState;
            float flowAmount = 0.50;
            if (flowingLeft && flowingRight) {
                flowAmount = 0.25;
                float leftFlow = (clampedState - left) * flowAmount;
                float rightFlow = (clampedState - right) * flowAmount;
                currFlowDirs[index].left = leftFlow;
                currFlowDirs[index].right = rightFlow;
            } else if (flowingLeft) {
                float space = (clampedState - left) * flowAmount;
                currFlowDirs[index].left = space;
            }else if (flowingRight) {
                float space = (clampedState - right) * flowAmount;
                currFlowDirs[index].right = space;
            } 
        }
        //now see if we need to go up. subtract all the outward flow that we just calculated to newstate
        newState -= currFlowDirs[index].down;
        newState -= currFlowDirs[index].left;
        newState -= currFlowDirs[index].right;
        //now if newState is still over 1, we'll try to go up
        if (newState > 1 && newState < 2) {
            //try to send 10% of the cell's extra contents up
            float space = 1 - up;
            float tryToSend = (newState - 1) * 0.1;
            float flow = min(space, tryToSend);
            currFlowDirs[index].up = flow;
        } else if (newState >= 2) {
            //if we're this full, we don't really care if there's space, we have to go up anyway. send 10% of the cell's extra contents up
            currFlowDirs[index].up = (newState - 2) * 0.1;
        }
    }

    //now we're done, update the cell
    cells[index].currentState = nextState;
}

//all this shader does is move the "current" state to the "previous" state, and make the "current" state new (zeroed out)
[numthreads(64,1,1)]
void AdvanceFlow (uint3 id : SV_DispatchThreadID)
{
    int index = id.x;
    prevFlowDirs[index].up = currFlowDirs[index].up;
    prevFlowDirs[index].down = currFlowDirs[index].down;
    prevFlowDirs[index].left = currFlowDirs[index].left;
    prevFlowDirs[index].right = currFlowDirs[index].right;
    currFlowDirs[index].up = 0;
    currFlowDirs[index].down = 0;
    currFlowDirs[index].left = 0;
    currFlowDirs[index].right = 0;
}